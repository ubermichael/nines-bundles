<?php

declare(strict_types=1);

namespace App\Repository;

use {{ entity_full_class_name }};
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\Query;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @method null|{{ entity_class_name }} find($id, $lockMode = null, $lockVersion = null)
 * @method {{ entity_class_name }}[] findAll()
 * @method {{ entity_class_name }}[] findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 * @method null|{{ entity_class_name }} findOneBy(array $criteria, array $orderBy = null)
 * @phpstan-extends ServiceEntityRepository<{{ entity_class_name }}>
 */
class {{ repository_class_name }} extends ServiceEntityRepository {
    public function __construct(ManagerRegistry $registry) {
        parent::__construct($registry, {{ entity_class_name }}::class);
    }

    public function indexQuery() : Query {
        return $this->createQueryBuilder('{{ entity_var_singular }}')
            ->orderBy('{{ entity_var_singular }}.id')
            ->getQuery();
    }

    public function typeaheadQuery(string $q) : Query {
        throw new \RuntimeException("Not implemented yet.");
        $qb = $this->createQueryBuilder('{{ entity_var_singular }}');
        $qb->andWhere('{{ entity_var_singular }}.column LIKE :q');
        $qb->orderBy('{{ entity_var_singular }}.column', 'ASC');
        $qb->setParameter('q', "{$q}%");

        return $qb->getQuery();
    }

    {% for index in indexes %}
        {%- if index['flags'] is defined and 'fulltext' in index['flags'] %}
            {%- set name -%}
                {%- for column in index['columns'] %}
                    {{- column|capitalize -}}
                {% endfor %}
            {%- endset %}

    public function search{{ name }}Query(string $q) : Query {
        $qb = $this->createQueryBuilder('{{ entity_var_singular }}');
        $qb->addSelect('MATCH ({% for column in index['columns'] %}{{ entity_var_singular }}.{{ column }}{% if not loop.last %}, {% endif %}{% endfor %}) AGAINST(:q BOOLEAN) as HIDDEN score');
        $qb->andHaving('score > 0');
        $qb->orderBy('score', 'DESC');
        $qb->setParameter('q', $q);

        return $qb->getQuery();
    }
        {% endif %}
    {% endfor %}

}
