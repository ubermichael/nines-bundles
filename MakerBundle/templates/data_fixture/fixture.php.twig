<?php

namespace {{ fixture_class_ns }};

{% set fkeys = association_fields|filter(v => v.type in [constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE'), constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_ONE')]) -%}

use {{ entity_class_name }};
use DateTime;
use DateTimeImmutable;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Bundle\FixturesBundle\FixtureGroupInterface;
{% if fkeys|length > 0 %}use Doctrine\Common\DataFixtures\DependentFixtureInterface;{% endif %}
use Doctrine\Persistence\ObjectManager;

{%- set implements %}
implements FixtureGroupInterface{%- if fkeys|length > 0 %}, DependentFixtureInterface{% else %}{% endif %}
{% endset %}

class {{ fixture_class_shortName }} extends Fixture {{ implements }} {
    public static function getGroups() : array {
        return ['dev', 'test'];
    }

    public function load(ObjectManager $manager): void
    {
        ${{ repository_var_single }} = $manager->getRepository({{ entity_class_shortName}}::class);
        for($i = 1; $i <= {{ fixture_count }}; $i++) {
          $fixture = new {{ entity_class_shortName }}();
        {%- for key, data in entity_fields %}
          {%- set name = data.fieldName %}
          {%- set label = name|u.camel.title %}
          {%- if data.id is defined %}
            {# do nothing #}

          {%- elseif name in ['created', 'updated'] %}
            {# do nothing #}

          {%- elseif data.enumType is defined %}
            $fixture->set{{ label }}(\{{ data.enumType }}::cases()[ ($i - 1) % count(\{{data.enumType}}::cases())]);

          {%- elseif data.type in ['array', 'simple_array', 'json'] %}
            $fixture->set{{ label }}(["{{ name }} {$i} A", "{{ name }} {$i} B"]);

          {%- elseif data.type in ['boolean'] %}
            $fixture->set{{ label }}($i % 2 == 0);

          {%- elseif data.type in ['int', 'smallint', 'integer', 'bigint'] %}
            $fixture->set{{ label }}($i);

          {%- elseif data.type in ['decimal', 'float'] %}
            $fixture->set{{ label }}($i+0.5);}

          {%- elseif data.type in ['text'] %}
            $fixture->set{{ label }}("<p>This is paragraph {$i}</p>");

          {%- elseif data.type in ['string'] %}
            $fixture->set{{ label }}("{{ name }} {$i}");

          {%- elseif data.type in ['date', 'datetime', 'datetimetz', 'time'] %}
            $m = ($i - 1) % 12 + 1;
            $d = ($i - 1) % 28 + 1;
            $fixture->set{{ label }}(new DateTime("2023-{$m}-{$d}"));

          {%- elseif data.type in ['date_immutable', 'datetime_immutable', 'datetimetz_immutable', 'time_immutable'] %}
            $m = ($i - 1) % 12 + 1;
            $d = ($i - 1) % 28 + 1;
            $fixture->set{{ label }}(new DateTimeImmutable("2023-{$m}-{$d}"));

          {%- else %}
            // Unknown data type {{ data.type }} for {{ name }} in {{ entity_class_shortName }}.

          {%- endif %}
        {% endfor %}

        {%- for field in fkeys %}
          {%- set relation = metadata.getDetails(field.targetEntity) %}
          $fixture->set{{ relation.entity_class_shortName }}($this->getReference("{{ relation.entity_var_single }}.{$i}", \{{ relation.entity_class_name}}::class));
        {%- endfor %}

          ${{ repository_var_single}}->save($fixture);
          $this->addReference("{{ entity_var_single }}.{$i}", $fixture);
        }
        ${{ repository_var_single}}->flush();
    }

    {%- if fkeys|length > 0 %}
        /**
        * {@inheritdoc}
        *
        * @return array<string>
        */
        public function getDependencies() : array {
            return [
        {%- for field in fkeys %}
          {%- set relation = metadata.getDetails(field.targetEntity) %}
              \{{ relation['fixture_class_name'] }}::class,
        {%- endfor %}
            ];
        }
    {%- endif %}

}
