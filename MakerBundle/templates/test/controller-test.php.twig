<?php

namespace {{ namespace }}\Tests\Controller;

{% set fkeys = associations|filter(v => v['type'] in [constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE'), constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_ONE')]) -%}

use {{ repository_full_class_name }};
use Nines\UserBundle\DataFixtures\UserFixtures;
use Nines\UtilBundle\TestCase\ControllerTestCase;
use Symfony\Component\HttpFoundation\Response;

class {{ controller_class_name }}Test extends ControllerTestCase {
    // Change this to HTTP_OK when the site is public.
    private const ANON_RESPONSE_CODE=Response::HTTP_FOUND;

    private const TYPEAHEAD_QUERY='{{ entity_var_singular }}';

    public function testAnonIndex() : void {
        $crawler = $this->client->request('GET', '/{{ route_name }}/');
        $this->assertResponseStatusCodeSame(self::ANON_RESPONSE_CODE);
        $this->assertSame(0, $crawler->selectLink('New')->count());
    }

    public function testUserIndex() : void {
        $this->login(UserFixtures::USER);
        $crawler = $this->client->request('GET', '/{{ route_name }}/');
        $this->assertResponseIsSuccessful();
        $this->assertSame(0, $crawler->selectLink('New')->count());
    }

    public function testAdminIndex() : void {
        $this->login(UserFixtures::ADMIN);
        $crawler = $this->client->request('GET', '/{{ route_name }}/');
        $this->assertResponseIsSuccessful();
        $this->assertSame(1, $crawler->selectLink('New')->count());
    }

    public function testAnonShow() : void {
        $crawler = $this->client->request('GET', '/{{ route_name }}/1');
        $this->assertResponseStatusCodeSame(self::ANON_RESPONSE_CODE);
        $this->assertSame(0, $crawler->selectLink('Edit')->count());
    }

    public function testUserShow() : void {
        $this->login(UserFixtures::USER);
        $crawler = $this->client->request('GET', '/{{ route_name }}/1');
        $this->assertResponseIsSuccessful();
        $this->assertSame(0, $crawler->selectLink('Edit')->count());
    }

    public function testAdminShow() : void {
        $this->login(UserFixtures::ADMIN);
        $crawler = $this->client->request('GET', '/{{ route_name }}/1');
        $this->assertResponseIsSuccessful();
        $this->assertSame(1, $crawler->selectLink('Edit')->count());
    }

    public function testAnonTypeahead() : void {
        $this->client->request('GET', '/{{ route_name }}/typeahead?q=' . self::TYPEAHEAD_QUERY);
        $response = $this->client->getResponse();
        $this->assertResponseStatusCodeSame(self::ANON_RESPONSE_CODE);
        if(self::ANON_RESPONSE_CODE === Response::HTTP_FOUND) {
            // If authentication is required stop here.
            return;
        }
        $this->assertSame('application/json', $response->headers->get('content-type'));
        $json = json_decode($response->getContent());
        $this->assertSame(5, count($json));
    }

    public function testUserTypeahead() : void {
        $this->login(UserFixtures::USER);
        $this->client->request('GET', '/{{ route_name }}/typeahead?q=' . self::TYPEAHEAD_QUERY);
        $response = $this->client->getResponse();
        $this->assertResponseIsSuccessful();
        $this->assertSame('application/json', $response->headers->get('content-type'));
        $json = json_decode($response->getContent());
        $this->assertSame(5, count($json));
    }

    public function testAdminTypeahead() : void {
        $this->login(UserFixtures::ADMIN);
        $this->client->request('GET', '/{{ route_name }}/typeahead?q=' . self::TYPEAHEAD_QUERY);
        $response = $this->client->getResponse();
        $this->assertResponseIsSuccessful();
        $this->assertSame('application/json', $response->headers->get('content-type'));
        $json = json_decode($response->getContent());
        $this->assertSame(5, count($json));
    }

    public function testAnonSearch() : void {
        $crawler = $this->client->request('GET', '/{{ route_name }}/search');
        $this->assertResponseStatusCodeSame(self::ANON_RESPONSE_CODE);
        if(self::ANON_RESPONSE_CODE === Response::HTTP_FOUND) {
            // If authentication is required stop here.
            return;
        }

        $form = $crawler->selectButton('btn-search')->form([
            'q' => '{{ entity_var_singular }}',
        ]);

        $responseCrawler = $this->client->submit($form);
        $this->assertResponseIsSuccessful();
    }

    public function testUserSearch() : void {
        $this->login(UserFixtures::USER);
        $crawler = $this->client->request('GET', '/{{ route_name }}/search');
        $this->assertResponseIsSuccessful();

        $form = $crawler->selectButton('btn-search')->form([
            'q' => '{{ entity_var_singular }}',
        ]);

        $responseCrawler = $this->client->submit($form);
        $this->assertResponseIsSuccessful();
    }

    public function testAdminSearch() : void {
        $this->login(UserFixtures::ADMIN);
        $crawler = $this->client->request('GET', '/{{ route_name }}/search');
        $this->assertResponseIsSuccessful();

        $form = $crawler->selectButton('btn-search')->form([
            'q' => '{{ entity_var_singular }}',
        ]);

        $responseCrawler = $this->client->submit($form);
        $this->assertResponseIsSuccessful();
    }

    public function testAnonEdit() : void {
        $crawler = $this->client->request('GET', '/{{ route_name }}/1/edit');
        $this->assertResponseRedirects('/login', Response::HTTP_FOUND);
    }

    public function testUserEdit() : void {
        $this->login(UserFixtures::USER);
        $crawler = $this->client->request('GET', '/{{ route_name }}/1/edit');
        $this->assertResponseStatusCodeSame(Response::HTTP_FORBIDDEN);
    }

    public function testAdminEdit() : void {
        $this->login(UserFixtures::ADMIN);
        $formCrawler = $this->client->request('GET', '/{{ route_name }}/1/edit');
        $this->assertResponseIsSuccessful();

        $form = $formCrawler->selectButton('Save')->form([
        {% for field in mapped_field_names %}
            {% set mapping = field_mappings[field] %}
            {% set label = mapping['columnName']|replace({'_': ' '})|title|replace({' ': ''}) -%}
            {% if mapping.type in ['datetime', 'date_immutable', 'date', 'time'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => '2020-01-01',
            {% elseif mapping.type in ['array'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => ['Updated 1', 'Updated 2'],
            {% elseif mapping.type in ['boolean'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 1,
            {% elseif mapping.type in ['int', 'smallint', 'integer', 'bigint'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 10,
            {% elseif mapping.type in ['decimal', 'float'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 12.50,
            {% elseif mapping.type in ['text'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => '<p>Updated Text</p>',
            {% else %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 'Updated {{ label }}',
            {% endif %}
        {% endfor %}
        ]);
        {% for field in fkeys|keys %}
            {%- set relation = relations[field] %}
            {%- set association = associations[field] %}
            {%- set label = relation['entity_class_name'] %}
            $this->overrideField($form, '{{ entity_twig_var_singular }}[{{ field }}]', 2);
        {% endfor %}

        $this->client->submit($form);
        $this->assertResponseRedirects('/{{ route_name }}/1', Response::HTTP_FOUND);
        $responseCrawler = $this->client->followRedirect();
        $this->assertResponseIsSuccessful();
    }

    public function testAnonNew() : void {
        $crawler = $this->client->request('GET', '/{{ route_name }}/new');
        $this->assertResponseRedirects('/login', Response::HTTP_FOUND);
    }

    public function testAnonNewPopup() : void {
        $crawler = $this->client->request('GET', '/{{ route_name }}/new_popup');
        $this->assertResponseRedirects('/login', Response::HTTP_FOUND);
    }

    public function testUserNew() : void {
        $this->login(UserFixtures::USER);
        $crawler = $this->client->request('GET', '/{{ route_name }}/new');
        $this->assertResponseStatusCodeSame(Response::HTTP_FORBIDDEN);
    }

    public function testUserNewPopup() : void {
        $this->login(UserFixtures::USER);
        $crawler = $this->client->request('GET', '/{{ route_name }}/new_popup');
        $this->assertResponseStatusCodeSame(Response::HTTP_FORBIDDEN);
    }

    public function testAdminNew() : void {
        $this->login(UserFixtures::ADMIN);
        $formCrawler = $this->client->request('GET', '/{{ route_name }}/new');
        $this->assertResponseIsSuccessful();

        $form = $formCrawler->selectButton('Save')->form([
        {% for field in mapped_field_names %}
            {% set mapping = field_mappings[field] %}
            {% set label = mapping['columnName']|replace({'_': ' '})|title|replace({' ': ''}) -%}
            {% if mapping.type in ['datetime', 'date_immutable', 'date', 'time'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => '2020-01-01',
            {% elseif mapping.type in ['array'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => ['Updated 1', 'Updated 2'],
            {% elseif mapping.type in ['boolean'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 1,
            {% elseif mapping.type in ['int', 'smallint', 'integer', 'bigint'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 10,
            {% elseif mapping.type in ['decimal', 'float'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 12.50,
            {% elseif mapping.type in ['text'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => '<p>Updated Text</p>',
            {% else %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 'Updated {{ label }}',
            {% endif %}
        {% endfor %}
        ]);
        {% for field in fkeys|keys %}
            {%- set relation = relations[field] %}
            {%- set association = associations[field] %}
            {%- set label = relation['entity_class_name'] %}
            $this->overrideField($form, '{{ entity_twig_var_singular }}[{{ field }}]', 2);
        {% endfor %}

        $this->client->submit($form);
        $this->assertResponseRedirects('/{{ route_name }}/6', Response::HTTP_FOUND);
        $responseCrawler = $this->client->followRedirect();
        $this->assertResponseIsSuccessful();
    }

    public function testAdminNewPopup() : void {
        $this->login(UserFixtures::ADMIN);
        $formCrawler = $this->client->request('GET', '/{{ route_name }}/new');
        $this->assertResponseIsSuccessful();

        $form = $formCrawler->selectButton('Save')->form([
        {% for field in mapped_field_names %}
            {% set mapping = field_mappings[field] %}
            {% set label = mapping['columnName']|replace({'_': ' '})|title|replace({' ': ''}) -%}
            {% if mapping.type in ['datetime', 'date_immutable', 'date', 'time'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => '2020-01-01',
            {% elseif mapping.type in ['array'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => ['Updated 1', 'Updated 2'],
            {% elseif mapping.type in ['boolean'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 1,
            {% elseif mapping.type in ['int', 'smallint', 'integer', 'bigint'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 10,
            {% elseif mapping.type in ['decimal', 'float'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 12.50,
            {% elseif mapping.type in ['text'] %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => '<p>Updated Text</p>',
            {% else %}
                '{{ entity_twig_var_singular }}[{{ field }}]' => 'Updated {{ label }}',
            {% endif %}
        {% endfor %}
        ]);
        {% for field in fkeys|keys %}
            {%- set relation = relations[field] %}
            {%- set association = associations[field] %}
            {%- set label = relation['entity_class_name'] %}
            $this->overrideField($form, '{{ entity_twig_var_singular }}[{{ field }}]', 2);
        {% endfor %}

        $this->client->submit($form);
        $this->assertResponseRedirects('/{{ route_name }}/7', Response::HTTP_FOUND);
        $responseCrawler = $this->client->followRedirect();
        $this->assertResponseIsSuccessful();
    }

    public function testAdminDelete() : void {
        /** @var {{ repository_class_name }} $repo */
        $repo = self::$container->get({{ repository_class_name }}::class);
        $preCount = count($repo->findAll());

        $this->login(UserFixtures::ADMIN);
        $crawler = $this->client->request('GET', '/{{ route_name }}/1');
        $this->assertResponseIsSuccessful();
        $form = $crawler->selectButton('Delete')->form();
        $this->client->submit($form);

        $this->assertResponseRedirects('/{{ route_name }}/', Response::HTTP_FOUND);
        $responseCrawler = $this->client->followRedirect();
        $this->assertResponseIsSuccessful();

        $this->em->clear();
        $postCount = count($repo->findAll());
        $this->assertSame($preCount - 1, $postCount);
    }
}
