<?php

namespace {{ namespace }}\DataFixtures;

{% set fkeys = associations|filter(v => v['type'] in [constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE'), constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_ONE')]) -%}

use {{ entity_full_class_name }};
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Bundle\FixturesBundle\FixtureGroupInterface;
{% if fkeys|length > 0 %}use Doctrine\Common\DataFixtures\DependentFixtureInterface;{% endif %}
use Doctrine\Persistence\ObjectManager;

{%- set implements %}
implements FixtureGroupInterface{%- if fkeys|length > 0 %}, DependentFixtureInterface{% else %}{% endif %}
{% endset %}

class {{ fixture_class_name }} extends Fixture {{ implements }} {

    public static function getGroups() : array {
        return ['dev', 'test'];
    }

    /**
     * {@inheritDoc}
     */
    public function load(ObjectManager $manager) : void {
        for($i = 1; $i <= {{ count }}; $i++) {
            $fixture = new {{ entity_class_name }}();
        {% for field in mapped_field_names %}
            {%- set mapping = field_mappings[field] %}
            {%- set label = mapping['columnName']|replace({'_': ' '})|title|replace({' ': ''}) -%}
            {%- if mapping.type in ['datetime', 'date_immutable', 'date', 'time'] %}
            $fixture->set{{ label }}(new \DateTime("2020-{$i}-{$i}"));
            {%- elseif mapping.type in ['array'] %}
            $fixture->set{{ label }}(['{{ label }} ' . $i]);
            {%- elseif mapping.type in ['boolean'] %}
            $fixture->set{{ label }}($i % 2 == 0);
            {%- elseif mapping.type in ['int', 'smallint', 'integer', 'bigint'] %}
            $fixture->set{{ label }}($i);
            {%- elseif mapping.type in ['decimal', 'float'] %}
            $fixture->set{{ label }}($i+0.5);
            {%- elseif mapping.type in ['text'] %}
            $fixture->set{{ label }}("<p>This is paragraph {$i}</p>");
            {%- else %}
            $fixture->set{{ label }}('{{ label }} ' . $i);
            {% endif %}
        {%- endfor %}

        {% for field in fkeys|keys %}
            {% set relation = relations[field] %}
            {% set association = associations[field] %}
            {% set label = relation['entity_class_name'] %}
            $fixture->set{{ field|capitalize }}($this->getReference('{{ label|lower }}.' . $i));
        {% endfor -%}

            $manager->persist($fixture);
            $this->setReference('{{ entity_class_name|lower }}.' . $i, $fixture);
      }
      $manager->flush();
    }

{% if fkeys|length > 0 %}
    /**
    * {@inheritdoc}
    *
    * @return array<string>
    */
    public function getDependencies() : array {
        return [
    {% for field in fkeys|keys %}
        {% set relation = relations[field] %}
        {% set association = associations[field] %}
            {{ relation['fixture_class_name'] }}::class,
    {% endfor %}
        ];
    }
{% endif %}

}
