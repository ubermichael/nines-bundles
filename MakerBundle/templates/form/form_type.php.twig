<?php

namespace {{ namespace }}\Form;

{% set fkeys = associations|filter(v => v['type'] in [constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_ONE'), constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE')]) -%}

use {{ entity_full_class_name }};
{% set seen = [] %}
{% for field in fkeys|keys %}
{% set relation = relations[field]['entity_full_class_name'] %}
{% if relation not in seen %}
{% set seen = seen|merge([relation]) %}
use {{ relation }};
{% endif %}
{%- endfor %}

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Tetranz\Select2EntityBundle\Form\Type\Select2EntityType;

/**
 * {{ entity_class_name }} form.
 */
class {{ form_class_name }} extends AbstractType {

    /**
     * Add form fields to $builder.
     *
     * @param array<string,mixed> $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options) {
        {% for field in mapped_field_names %}
            {%- set mapping = field_mappings[field] %}
            {% set label = mapping['columnName']|replace({'_': ' '})|title %}
                {%- if mapping.type in ['array'] %}
                $builder->add('{{ field }}', CollectionType::class, [
                    'label' => '{{ label }}',
                    'required' => {% if mapping['nullable'] == 1 %}false{% else %}true{% endif %},
                    'allow_add' => true,
                    'allow_delete' => true,
                    'delete_empty' => true,
                    'entry_type' => TextType::class,
                    'entry_options' => [
                        'label' => false,
                    ],
                    'by_reference' => false,
                    'attr' => [
                        'class' => 'collection collection-simple',
                        'help_block' => '',
                    ],
                ]);
                {%- elseif mapping.type in ['date', 'datetime'] %}
                $builder->add('{{ field }}', DateType::class, array(
                    'label' => '{{ label }}',
                    'required' => {% if mapping['nullable'] == 1 %}false{% else %}true{% endif %},
                    'widget' => 'single_text',
                    'html5' => true,
                    'attr' => array(
                        'help_block' => '',
                    ),
                ));
                {%- elseif mapping.type in ['string'] %}
                $builder->add('{{ field }}', TextType::class, array(
                    'label' => '{{ label }}',
                    'required' => {% if mapping['nullable'] == 1 %}false{% else %}true{% endif %},
                    'attr' => array(
                        'help_block' => '',
                    ),
                ));
                {%- elseif mapping.type in ['text'] %}
                $builder->add('{{ field }}', TextareaType::class, array(
                    'label' => '{{ label }}',
                    'required' => {% if mapping['nullable'] == 1 %}false{% else %}true{% endif %},
                    'attr' => array(
                        'help_block' => '',
                        'class' => 'tinymce',
                    ),
                ));
                {%- elseif mapping.type in ['boolean'] %}
                $builder->add('{{ field }}', ChoiceType::class, array(
                    'label' => '{{ label }}',
                    'expanded' => true,
                    'multiple' => false,
                    'choices' => array(
                        'Yes' => true,
                        'No' => false,
                        {% if mapping['nullable'] == 1 %}'Unknown' => null,{% endif -%}
                    ),
                    'required' => {% if mapping['nullable'] == 1 %}false{% else %}true{% endif %},
                    'attr' => array(
                        'help_block' => '',
                    ),
                ));
                {% else %}
                $builder->add('{{ field }}', null, [
                    'label' => '{{ label }}',
                    'required' => {% if mapping['nullable'] == 1 %}false{% else %}true{% endif %},
                    'attr' => array(
                        'help_block' => '',
                    ),
                ]);
                {%- endif %}
            {% endfor %}

            {% for field in fkeys|keys %}
                {% set relation = relations[field] %}
                {% set association = associations[field] %}
                {% set label = relation['entity_class_name'] %}

                {% if association['type'] in [constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE'), constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_ONE')] %}
                    $builder->add('{{ field }}', Select2EntityType::class, [
                        'label' => '{{ label }}',
                        'class' => {{ relation['entity_class_name'] }}::class,
                        'remote_route' => '{{ relation['route_name'] }}_typeahead',
                        'allow_clear' => true,
                        'attr' => array(
                            'help_block' => '',
                            'add_path' => '{{ relation['route_name'] }}_new_popup',
                            'add_label' => 'Add {{ relation['entity_class_name'] }}',
                        ),
                    ]);
                {% elseif association['type'] == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_MANY') %}
                    $builder->add('{{ field }}', Select2EntityType::class, [
                        'label' => '{{ label }}',
                        'class' => {{ relation['entity_class_name'] }}::class,
                        'remote_route' => '{{ relation['route_name'] }}_typeahead',
                        'allow_clear' => true,
                        'multiple' => true,
                        'attr' => array(
                            'help_block' => '',
                            'add_path' => '{{ relation['route_name'] }}_new_popup',
                            'add_label' => 'Add {{ relation['entity_class_name'] }}',
                        ),
                    ]);
                {% endif %}

        {%- endfor %}

    }

    /**
     * Define options for the form.
     *
     * Set default, optional, and required options passed to the
     * buildForm() method via the $options parameter.
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => {{ entity_class_name }}::class
        ));
    }

}
