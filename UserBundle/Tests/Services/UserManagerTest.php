<?php

declare(strict_types=1);

/*
 * (c) 2022 Michael Joyce <mjoyce@sfu.ca>
 * This source file is subject to the GPL v2, bundled
 * with this source code in the file LICENSE.
 */

namespace Nines\UserBundle\Tests\Services;

use DateTimeImmutable;
use Nines\UserBundle\Entity\User;
use Nines\UserBundle\Services\UserManager;
use Nines\UtilBundle\TestCase\ServiceTestCase;

class UserManagerTest extends ServiceTestCase {
    private ?UserManager $manager = null;

    public function testSetUp() : void {
        $this->assertInstanceOf(UserManager::class, $this->manager);
    }

    public function testFindByToken() : void {
        $user = $this->em->find(User::class, 3);
        $user->setResetToken('abc123');
        $user->setResetExpiry(new DateTimeImmutable('+ 1 day'));
        $this->em->flush();

        $found = $this->manager->findByToken('abc123');
        $this->assertSame($user, $found);
    }

    public function testFindByExpiredToken() : void {
        $user = $this->em->find(User::class, 3);
        $user->setResetToken('abc123');
        $user->setResetExpiry(new DateTimeImmutable('- 10 days'));
        $this->em->flush();

        $found = $this->manager->findByToken('abc123');
        $this->assertNull($found);
    }

    public function testFindByWrongToken() : void {
        $user = $this->em->find(User::class, 3);
        $user->setResetToken('pdq9876');
        $user->setResetExpiry(new DateTimeImmutable('+ 10 days'));
        $this->em->flush();

        $found = $this->manager->findByToken('abc123');
        $this->assertNull($found);
    }

    public function testGeneratePassword() : void {
        $password = $this->manager->generatePassword();
        $this->assertGreaterThan(10, mb_strlen($password));
    }

    public function testGenerateToken() : void {
        $token = $this->manager->generateToken();
        $this->assertGreaterThan(10, mb_strlen($token));
    }

    public function testRequestReset() : void {
        $user = new User();
        $this->manager->requestReset($user);
        $this->assertNotNull($user->getResetToken());
        $this->assertNotNull($user->getResetExpiry());
    }

    public function testValidatePassword() : void {
        $user = $this->em->find(User::class, 1);
        $this->assertTrue($this->manager->validatePassword($user, 'supersecret'));
    }

    public function testChangePassword() : void {
        $user = $this->em->find(User::class, 1);
        $this->manager->changePassword($user, 'abc12345');
        $this->assertTrue($this->manager->validatePassword($user, 'abc12345'));
    }

    public function testPromote() : void {
        $user = new User();
        $this->manager->promote($user, 'a');
        $this->assertTrue($user->hasRole('a'));
    }

    public function testDemote() : void {
        $user = new User();
        $user->addRole('a');
        $this->manager->demote($user, 'a');
        $this->assertFalse($user->hasRole('a'));
    }

    public function testSendReset() : void {
        $user = $this->em->find(User::class, 1);
        $this->manager->requestReset($user);
        $email = $this->manager->sendReset($user, ['ip' => '0.0.0.0']);
        $this->assertSame('Password Reset Request', $email->getSubject());
    }

    protected function setUp() : void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->manager = self::$container->get(UserManager::class);
    }
}
